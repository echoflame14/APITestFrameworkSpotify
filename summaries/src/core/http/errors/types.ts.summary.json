{
  "filePath": "src\\core\\http\\errors\\types.ts",
  "summary": "This TypeScript file defines a set of interfaces and constants related to error handling in an application. The main purpose of this file is to provide a standardized and structured approach to error handling, ensuring consistency and ease of use across the codebase. Key functionality: 1. **Base Error Context**: The `BaseErrorContext` interface defines the base structure for error handling, including information about the resource type, resource ID, validation errors, request context, and additional data. 2. **Validation Errors**: The `ValidationErrors` interface provides a structured representation of validation errors, including missing fields, invalid types, expected types, and received types. 3. **Request Context**: The `RequestContext` interface encapsulates information about the HTTP request, including the endpoint, method, parameters, and headers. 4. **Error Type Metadata**: The `ErrorTypeMetadata` interface defines metadata for different types of errors, including an error code, a flag for retryability, a default message, severity level, and HTTP status code. 5. **Normalized Error**: The `NormalizedError` interface represents a standardized error format, including the error code, message, status code, context, retryability, and timestamp. 6. **Structured Error Log**: The `StructuredErrorLog` interface defines the structure for logging errors, including the error code, message, status code, context, stack trace, timestamp, and severity level. 7. **Spotify Error Response**: The `SpotifyErrorResponse` interface defines the structure of error responses from the Spotify API, including the error message, status, and optional retry delay. 8. **Spotify Error Data**: The `SpotifyErrorData` interface extends the error data with additional information specific to Spotify API errors, such as the original error, market, and additional context. 9. **Error Severity**: The `ErrorSeverity` type represents the supported severity levels for errors (low, medium, high). 10. **Error Codes**: The `ERROR_CODES` object defines a set of constant error codes for consistent error identification across the application. 11. **Error Registry**: The `ERROR_REGISTRY` object provides a centralized registry of error metadata for each error code, including the code, retryability, default message, severity, and status code. Overall, this file establishes a robust and extensible error handling system, enabling consistent and structured error management throughout the application.",
  "lastUpdated": "2025-01-29T19:48:53.873Z",
  "fileHash": "1479fa0ed569af1e41cb3ce686f70fff"
}